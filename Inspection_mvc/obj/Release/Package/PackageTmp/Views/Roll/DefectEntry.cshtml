@Model Models.RollByYardsViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="jumbotron">
    <div style="width:100%;">
        <div style="position:absolute; left:30px; top:50px;">
            <button type="button" class="animatedButton" onclick="@("window.location.href='" + @Url.Action("WeaverEntry", "Roll", new { JobId = Model.currentJob.id  }) + "'");" style="margin-top:20%; color:white; height:70px; width:180px; background-color:#4e9bda">Back</button>
            <br /><button type="button" id="undo" class="animatedButton" style="margin-top:25px; color:white; background-color: #e1d931; height:70px; width:180px;">Undo</button>
            <br />
        </div>
        <div style="position:absolute; left:30px; top:260px;">
            <label id="undoLabel" style="margin-top: 10px; color:rgba(243, 49, 49, 0.92); font-size:large; font-style: italic;"></label>
        </div>
        <div id="tabs" style="width:65%; top:50px; height:79%; right: 52px; position:absolute; background-color:#eeeeee;">
            <ul> </ul>
        </div>
        <div id="loading" style="width:74%; top:80px; height:75%; left:264px; position:absolute; display: none;">
            <div style="width:100%; top:7px; height:100%; position:absolute;z-index:0; background-color:lightgray; opacity:.4;"></div>
            <input type="image" src="~/Content/Images/load-indicator.gif" style="z-index:3; margin-left: 41%; margin-top:20%; position:absolute;" />
        </div>
        <div class="bottombutton" style="position:absolute; left:30px; top:70%;">
            <button type="button" id="NextWeaver" class="animatedButton" style="color:white; height:70px; width:310px; background-color:darkgray;" >Next Weaver</button>
        </div>
        <div class="bottombutton" style="position:absolute; right: 82px; top:70%">
            <button type="button" id="RollComplete" class="animatedButton" style="color:white; height:70px; width:310px; background-color:#70d637;">Roll Complete</button>
        </div>
    </div>
</div>
<input type="hidden" class="PageInput" value="@Model.currentJob.id" name="JobId"  />
<input type="hidden" class="PageInput" value="@Model.currentJob.DataNo" name="DataNo" />

<script src="http://code.jquery.com/jquery-1.9.1.min.js" type="text/javascript"></script>
<script src="http://code.jquery.com/ui/1.10.1/jquery-ui.min.js" type="text/javascript"></script>
<link href="http://cdn.wijmo.com/themes/arctic/jquery-wijmo.css" rel="stylesheet" type="text/css" />
<link href="http://cdn.wijmo.com/jquery.wijmo-pro.all.3.20141.34.min.css" rel="stylesheet" type="text/css" />

<script src="http://cdn.wijmo.com/jquery.wijmo-open.all.3.20141.34.min.js" type="text/javascript"></script>
<script src="http://cdn.wijmo.com/jquery.wijmo-pro.all.3.20141.34.min.js" type="text/javascript"></script>
<script src="http://cdn.wijmo.com/interop/wijmo.data.ajax.3.20141.34.js" type="text/javascript"></script>
<style type="text/css">
    .buttontemplate {
        color: #fff;
        background-color: #6496c8;
        text-shadow: 3px 2px 4px #141415;
        border-radius: 29px;
        box-shadow: 1px 3px 1px rgba(27, 26, 26, 0.61), 3px 7px 8px rgb(255, 128, 128) inset;
        border-color: black;
        border-style: solid;
        border-width: 1px;
        display: inline-block;
        margin: 0 10px 0 0;
        padding: 15px 45px;
        line-height: 1.8;
        outline:none;
    }
    .buttontemplate:hover{ 
        height:75px;
        color:darkgrey !important;
        -webkit-box-shadow: inset 0px 1px 1px #000, 0 0px 0px 0px #000;
        -moz-box-shadow: inset 0px 1px 1px #000, 0 0px 0px 0px #000;
        box-shadow: inset 0px 1px 1px #000, 0 0px 0px 0px #000;
    }
    .ui-tabs-active { 
        display:none !important;
    }
    .ui-widget-content {
        border: 0px solid #aaaaaa;
        background: #eeeeee;
        color: #222222;
    }
    .buttonlabel {
        color: black;
        font-size: .6em;
        font-weight: 700;
        right: 150px;
        top: 50px;
        position: relative;
    }
    }
        .buttontemplate:active {
            background-color: #A3C6EA;
        }
</style>
<script type="text/javascript">

    var tabs = @Html.Raw(Json.Encode(Model.tabs));
    var buttons = @Html.Raw(Json.Encode(Model.buttons));
    var requiredInputs = @Html.Raw(Json.Encode(Model.RequiredInputs));


    var $tabs = $('#tabs').wijtabs({
        tabTemplate: '<li><a href="#{href}">#{label}</a> <span class="ui-icon ui-icon-close">Remove Tab</span></li>',
        add: function (event, ui) {
            var tab_content = 'Tab test content.';
            console.log('addTabs');
            template.RenderTab(ui);
        },
        select: function (e, args) {
            var tablength = $('#tabs').wijtabs("length");

        },
        scrollable: true
    });
    

    var Inspection = {
        getPageInputs: function () {
            var Fields = new Array();

            $(".PageInput").each(function (index, obj) {
                var value = $(obj).val();
                var name = $(obj).attr('name');
                Fields.push({value: value, id: name, name: name});
            });
            return Fields;
        },
        insertDefect: function ( inputsArr, ButtonTemplateId_, DefectDesc_, WeaverShiftId_) {
            var DefectDivstr = "DefectDiv" + ButtonTemplateId_.toString();
            console.log(DefectDivstr);
            $("#" + DefectDivstr).css("background-color", "rgba(68, 165, 49, 0.53)").fadeIn(300);
            var jobObj = customJSONstringify(@Html.Raw(Json.Encode(Model.currentJob)));
            console.log(jobObj);
            $.ajax({
                url: "/Roll/InsertDefect",
                type: "POST",
                data: {jobStr: jobObj, ButtonTemplateId: ButtonTemplateId_, DefectDesc: DefectDesc_, WeaverShiftId: WeaverShiftId_, TemplateId: @Model.TemplateId }, 
                success: function (data, text, jqx) {
                    $("#" + DefectDivstr).css("background-color", "transparent").fadeIn(300);
                    console.log(data); 
                    if (data) { 
                        var resultArr = data.split('_')[0];
                        
                        if (resultArr == "true") { 
                            $("#undoLabel").text(data.split('_')[1]); 
                            var Counterstr = "Counter" + ButtonTemplateId_.toString();
                            var Count = Number($("#" + Counterstr).text()) + 1;
                            $("#" + Counterstr).text(Count);

                        } else { 
                            $("#undoLabel").text(data); 
                        }
                    }
                }
            });
        }, 
        undoLastDefect: function () { 
            $.ajax({ 
                url: "/Roll/UndoLastDefect", 
                type: "POST", 
                data: {JobId: "@Model.currentJob.id", WeaverShiftId: @Model.currentShiftId}, 
                success: function(data, text, jqx) { 
                    var splitArr = data.split('_'); 
                    if (splitArr.length > 1) { 
                        var counterstr = "Counter" + splitArr[0];
                        var Count = Number($("#" + counterstr).text()) - 1;
                        if (Count >= 0) { 
                            $("#" + counterstr).text(Count);
                        } else { 
                            $("#" + counterstr).text("0");
                        }
                        $("#undoLabel").text(splitArr[1]); 
                    }
                    
                    //setTimeout(function() { 
                    //    $("#undoLabel").text(""); 
                    //}, 3000);
                    
                }
            });
        }
    };

    var template = {
        load: function (tabs, buttons) {
            if (tabs != null) {
                var TabCount = 0;
                template.tabsAr = tabs;
                template.buttonAr = buttons;
                var TabInsertLoop = setInterval(function () {
                    var tab = tabs[TabCount];
                    if (TabCount >= tabs.length - 1 || tabs.length == 0) {
                        clearInterval(TabInsertLoop);
                    }

                    if (tab && buttons != null) {
                        template.buttons.ToRender = template.filterforButtons(buttons, TabCount);
                        $("#tabs").wijtabs('add', '#tab-' + tab.TabNumber, tab.Name);
                    }
                }, 50);
            }
        },
        tabsAr: Array(),
        buttonAr: Array(),
        filterforButtons: function (buttonArr, tabNumber) {
            var array =  buttonArr.filter(
                function (value) {
                    if (value.TabNumber == tabNumber) {
                        return true;
                    } else {
                        return false;
                    }
                });
            return array;
        },
        RenderTab: function (ui) {
            if (template.buttons.ToRender != null && template.buttons.ToRender.length > 0) {
                var size3R = template.buttons.getButtonSize3Rows(template.buttons.ToRender.length);
                for (var i = 0; i < template.buttons.ToRender.length; i++) {
                    var button = template.buttons.ToRender[i];
                    if (button) {
                        var position3RArr = template.buttons.getButtonPosition3Rows(i, size3R[0].height, size3R[0].width);
                        console.log(position3RArr); 
                        if (position3RArr) {
                            var html3 = '<div id="DefectDiv' + button.id 
                                + '" name="' + button.ButtonTemplateId + '" style="width: ' + size3R[0].width + 'px; height: ' + size3R[0].height 
                                + 'px; text-align: center; position:absolute; left: ' + position3RArr.left + 'px; top: ' + position3RArr.top 
                                + 'px; background-color: transparent;"><button id="DefectButton' + button.id + '" class="buttontemplate" name="' 
                                + button.ButtonTemplateId + '" type="button" style="position:relative; background-color: ' 
                                + template.buttons.getButtonColor(button.DefectType) + '; border-radius:29px; font-size: .6em; color:white;  height: ' 
                                + (size3R[0].height - 10) + 'px; width: ' + size3R[0].height + 'px;">' + button.ButtonLibraryId + '.<br />' 
                                + button.text +'</button></div><div style="position:absolute; top: ' + (position3RArr.top + size3R[0].height - 50).toString() + 'px; width: ' + size3R[0].width + 'px; left: ' 
                                + position3RArr.left.toString() + 'px; text-align:center;"><label style="position:relative; left:0px; top:0px;" class="buttonlabel">Quantity Entered:</label><label style="position:relative; font-size:medium; left: 3px;" id="Counter'
                                + button.id + '">0</label><input type=hidden id="' + button.id + '_hidden_text" value="' + button.text + '" /></div>';
                            $(ui.panel).append(html3);


                        }
                    }
                }
            }
        },
        buttons: {
            colors: {
                major : "rgb(241, 6, 6)",
                minor : "#B7B328",
                repairs : "rgba(0,0,0,0.5)",
                scrap : "#0C0D0C",
                time : "#33ccd2",
                upgrade : "#14b71e",
                fix : "#95ea9a"
             },
            ToRender: new Array(),
            getButtonColor: function (defectType) {
                switch (defectType) {
                    case "0":
                        return template.buttons.colors.minor;
                        break;
                    case "1":
                        return template.buttons.colors.major;
                        break;
                    case "repairs":
                        return template.buttons.colors.repairs;
                        break;
                    case "scrap":
                        return template.buttons.colors.scrap;
                        break;
                    case "Time":
                        return template.buttons.colors.time;
                        break;
                    case "Upgrade":
                        return template.buttons.colors.upgrade;
                        break;
                    case "Fix":
                        return template.buttons.colors.fix;
                        break;
                    default:
                        return template.buttons.colors.major;
                        break;
                }
            },
            getButtonSize3Rows: function (buttonCount) {
                var $tabs = $("#tabs");
                var returnArray = new Array();
                if ($tabs) {
                    var bCount = new Number(buttonCount);
                    if (bCount > 0) {
                        var DistanceToCenter = Math.ceil(bCount / 3);
                        var ButtonHeight = ($tabs.height() - 10) / DistanceToCenter;
                        var ButtonWidth = ($tabs.width() - 5) / 3;
                        console.log('size', ButtonHeight, ButtonWidth);
                        returnArray.push({width: ButtonWidth, height: ButtonHeight});
                    } else {
                        returnArray.push({width: 200, height: 200});
                    }
                }
                return returnArray;
            },
            getButtonPosition3Rows: function (count, buttonheight, buttonwidth) {
                var $tabs = $("#tabs");
                var height = $tabs.height()
                var width = $tabs.width()
                var left;
                var top;
                var countnumber = new Number(count);
                var butheight = new Number(buttonheight);
                var butwidth = new Number(buttonwidth);
                var HeaderBuffer = 107 + $(".ui-tabs-nav.ui-helper-reset.ui-helper-clearfix.ui-widget-header.ui-corner-all").height();
                if (countnumber % 3 == 0) {
                    left = 5;
                    top = HeaderBuffer + ((countnumber - 1) * butheight + 1) / 3;
                } else if (countnumber % 3 == 1) {
                    left = 12 + butwidth;
                    top = HeaderBuffer + ((countnumber - 2) * butheight + 1) / 3;
                } else if (countnumber % 3 == 2) {
                    left = 17 + butwidth * 2;
                    top = HeaderBuffer + ((countnumber - 3) * butheight + 1) / 3;
                }
                return {left: left, top: top }
            }
        }
    };
    $(function() {
        template.load(tabs, buttons);
        $(".ui-tabs-panel").on('click','.buttontemplate', function (e) {
            e.preventDefault();
            var buttonid_ = $(this).attr('id');
            var buttonvalue_ = $(this).text();
            var buttonname_ = $(this).attr('name');
            var DefectDesc = $("#" + buttonname_ + "_hidden_text").val(); 
            var PageInputs = Inspection.getPageInputs();
            if (PageInputs != null)
                Inspection.insertDefect(PageInputs, buttonname_, DefectDesc, @Model.currentShiftId);
           
        });
        $(".jumbotron").css('height', ($("#tabs").height() + 250) + "px");
        $(".bottombutton").css('top', ($("#tabs").height() + 100) );
        $("#NextWeaver").click(function(e) { 
            window.location.href = "@Html.Raw(Url.Action("EndShift", new { JobId = Model.currentJob.id, weaverShiftId= Model.currentShiftId }))"; 
        });
        $("#RollComplete").click(function(e) { 
            window.location.href = "@Html.Raw(Url.Action("RollComplete", new { JobId = Model.currentJob.id, weaverShiftId = Model.currentShiftId }))"
        });
        $("#undo").click(function(e) { 
            Inspection.undoLastDefect(); 
        });
    });

    $(document).keypress(function (e) {
        if (e.which == 13) {
            $("#RollComplete").trigger('click');
        }
    });

    function customJSONstringify(obj) {
        return JSON.stringify(obj).replace(/\/Date/g, "\\\/Date").replace(/\)\//g, "\)\\\/")
    }
</script>

